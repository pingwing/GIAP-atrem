var drawInteraction=null,selectInteraction=null,modifyInteraction=null,dragInteraction=null,featuresToInsert={},featuresToUpdateObject={},featuresToDelete={};function clearTransactionFeatures(){featuresToInsert={};featuresToUpdateObject={};featuresToDelete={};_.each(editableLayers,function(a){featuresToInsert[a.name]=[];featuresToUpdateObject[a.name]={};featuresToDelete[a.name]=[]})}var dragIconPointFeatures={};
function initiateDragIconPointFeatures(){dragIconPointFeatures={};_.each(editableLayers,function(a){dragIconPointFeatures[a.name]=[]})}clearTransactionFeatures();initiateDragIconPointFeatures();function deleteFeatures(a){var b=selectInteraction.getFeatures();0<b.getLength()?(_.each(b.getArray(),function(b){editableLayers[a].vectorSource.removeFeature(b);featuresToDelete[a].push(b)}),b.clear(),clearDragIconPointFeatures()):window.alert("Wybierz najpierw obiekt do usuni\u0119cia")}
function modifiedFeatures(a){var b=this,c=a.features.getArray();0<a.features.getLength()&&_.each(c,function(a){featuresToUpdateObject[b][a.id_]=a})}function addedFeatures(a){var b=uid();a=a.feature;a.setId(b);b=a.getGeometry().clone();b.applyTransform(transformationFromWebToPL);a.set("geom",b);featuresToInsert[this].push(a)}var id=0;function uid(){return id+=1}
function removeAllInteractions(){map.removeInteraction(selectInteraction);map.removeInteraction(modifyInteraction);map.removeInteraction(dragInteraction);map.removeInteraction(drawInteraction)}
function addModifyInteraction(a){removeAllInteractions();selectInteraction=new ol.interaction.Select({layers:[editableLayers[a].vector]});map.addInteraction(selectInteraction);var b=selectInteraction.getFeatures();selectInteraction.on("select",onSelect,a);modifyInteraction=new ol.interaction.Modify({features:b,deleteCondition:function(a){return ol.events.condition.shiftKeyOnly(a)&&ol.events.condition.singleClick(a)}});map.addInteraction(modifyInteraction);modifyInteraction.on("modifyend",modifiedFeatures,
a)}function clearDragIconPointFeatures(){_.each(editableLayers,function(a){_.each(dragIconPointFeatures[a.name],function(b){editableLayers[a.name].vectorSource.removeFeature(b)})});initiateDragIconPointFeatures()}
function onSelect(a){0<a.deselected.length&&(map.removeInteraction(dragInteraction),clearDragIconPointFeatures());if(0<a.selected.length){a=a.selected[0];var b=a.getGeometry().getExtent(),b=ol.extent.getCenter(b),c=new ol.Feature({geometry:new ol.geom.Point(b)});c.setStyle(new ol.style.Style({image:new ol.style.Circle({radius:7,fill:new ol.style.Fill({color:"#0000ff"})})}));editableLayers[this].vectorSource.addFeatures([c]);dragInteraction=new ol.interaction.Modify({features:new ol.Collection([c])});
var d=a.getGeometry().clone();c.on("change",onDragPoint,{draggedFeature:a,initialPosition:b,dragIconPointFeature:c,initialClonedGeometry:d,currentEditLayerName:this});map.addInteraction(dragInteraction);dragIconPointFeatures[this].push(c)}}
function onDragPoint(){var a=this.dragIconPointFeature.getGeometry().getCoordinates(),a=[a[0]-this.initialPosition[0],a[1]-this.initialPosition[1]],b=this.initialClonedGeometry.clone();b.translate(a[0],a[1]);this.draggedFeature.setGeometry(b);featuresToUpdateObject[this.currentEditLayerName][this.draggedFeature.id_]=this.draggedFeature}
function addDrawInteraction(a,b){removeAllInteractions();drawInteraction=new ol.interaction.Draw({source:editableLayers[a].vectorSource,type:b});map.addInteraction(drawInteraction);drawInteraction.on("drawend",addedFeatures,a)};
